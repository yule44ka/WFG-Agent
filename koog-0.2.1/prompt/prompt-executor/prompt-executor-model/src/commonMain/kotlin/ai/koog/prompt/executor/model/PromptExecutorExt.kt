package ai.koog.prompt.executor.model

import ai.koog.prompt.dsl.Prompt
import ai.koog.prompt.llm.LLModel
import ai.koog.prompt.message.Message
import io.github.oshai.kotlinlogging.KotlinLogging

/**
 * Utility object providing extensions for working with `PromptExecutor` and processing language model responses.
 */
public object PromptExecutorExt {

    private val logger = KotlinLogging.logger("ai.koog.prompt.executor.PromptExecutorExt")

    /**
     * Executes a given prompt using the specified language model and returns a single response.
     *
     * This function is a convenience method that processes the prompt with the given model while
     * assuming no tools are available and extracts the first response from the result.
     *
     * @param prompt The `Prompt` object containing the messages and parameters for execution.
     * @param model The `LLModel` instance that specifies the language model to be used.
     * @return A single `Message.Response` representing the result generated by the language model.
     */
    public suspend fun PromptExecutor.execute(prompt: Prompt, model: LLModel): Message.Response {
        return this.execute(prompt = prompt, model = model, tools = emptyList()).singleResponse()
    }

    /**
     * Retrieves the single response from a list of `Message.Response` objects.
     *
     * This function ensures that the list contains exactly one response.
     * If the list contains more than one response, an `IllegalArgumentException` is thrown.
     * If the list is empty, a `NoSuchElementException` is thrown.
     *
     * @return The single `Message.Response` present in the list.
     * @throws IllegalArgumentException if the list contains more than one response.
     * @throws NoSuchElementException if the list is empty.
     */
    public fun List<Message.Response>.singleResponse(): Message.Response {
        if (this.size > 1) {
            throw IllegalArgumentException("More than one response found. Size: ${this.size}")
        }

        if (this.isEmpty()) {
            throw NoSuchElementException("No response received from LLM")
        }

        return this[0]
    }

    /**
     * Retrieves a single response from the list if the list contains exactly one response.
     * If the list contains more than one response, a warning is logged, and null is returned.
     *
     * @return The single response if the list contains exactly one response, or null otherwise.
     */
    public fun List<Message.Response>.singleResponseOrNull(): Message.Response? {
        if (this.size > 1) {
            logger.warn { "More than one response found: $this" }
            return null
        }
        return this.singleOrNull()
    }

    /**
     * Retrieves the first response from the list of `Message.Response`.
     * If the list is empty, a `NoSuchElementException` is thrown.
     *
     * @return The first `Message.Response` in the list.
     * @throws NoSuchElementException if the list is empty.
     */
    public fun List<Message.Response>.firstResponse(): Message.Response {
        if (this.isEmpty()) {
            throw NoSuchElementException("No response received from LLM")
        }

        return this[0]
    }

    /**
     * Retrieves the first response from the list if it exists and there is only one response; otherwise, returns null.
     * Logs a warning if there are multiple responses in the list.
     *
     * @return The first response in the list if there is exactly one response, or null if there are none or more than one.
     */
    public fun List<Message.Response>.firstResponseOrNull(): Message.Response? {
        if (this.size > 1) {
            logger.warn { "More than one response found: $this" }
        }
        return this.firstOrNull()
    }
}